/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 */

/// GetTransactionDetailsByTransactionIdFromCallbackRibsp : Polygon



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetTransactionDetailsByTransactionIdFromCallbackRibsp {
    /// Representation of the amount value.
    #[serde(rename = "amount")]
    pub amount: String,
    /// Represents the specific transaction contract.
    #[serde(rename = "contract")]
    pub contract: String,
    /// Represents the price offered to the miner to purchase this amount of gas.
    #[serde(rename = "gas")]
    pub gas: String,
    /// Represents the price offered to the miner to purchase this amount of gas.
    #[serde(rename = "gasPrice")]
    pub gas_price: String,
    /// Represents the exact unit of gas that was used for the transaction.
    #[serde(rename = "gasUsed")]
    pub gas_used: String,
    /// Represents additional information that is required for the transaction.
    #[serde(rename = "input")]
    pub input: String,
    /// Represents the sequential running number for an address, starting from 0 for the first transaction. E.g., if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.
    #[serde(rename = "nonce")]
    pub nonce: i32,
    /// Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
    #[serde(rename = "recipients")]
    pub recipients: String,
    /// Represents a list of sender addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
    #[serde(rename = "senders")]
    pub senders: String,
    /// Represents the status of this transaction.
    #[serde(rename = "transactionStatus")]
    pub transaction_status: String,
    /// Represents the unique identifier of a transaction, i.e. it could be transactionId in UTXO-based protocols like Bitcoin, and transaction hash in Ethereum blockchain.
    #[serde(rename = "txid")]
    pub txid: String,
}

impl GetTransactionDetailsByTransactionIdFromCallbackRibsp {
    /// Polygon
    pub fn new(amount: String, contract: String, gas: String, gas_price: String, gas_used: String, input: String, nonce: i32, recipients: String, senders: String, transaction_status: String, txid: String) -> GetTransactionDetailsByTransactionIdFromCallbackRibsp {
        GetTransactionDetailsByTransactionIdFromCallbackRibsp {
            amount,
            contract,
            gas,
            gas_price,
            gas_used,
            input,
            nonce,
            recipients,
            senders,
            transaction_status,
            txid,
        }
    }
}


