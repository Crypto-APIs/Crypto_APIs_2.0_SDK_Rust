/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrepareAnAccountBasedTransactionFromHdWalletXPubYPubZPubRbDataItem {
    /// Representation of the additional data.
    #[serde(rename = "additionalData", skip_serializing_if = "Option::is_none")]
    pub additional_data: Option<String>,
    /// Representation of the amount of the transaction
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "fee")]
    pub fee: Box<crate::models::PrepareAnAccountBasedTransactionFromHdWalletXPubYPubZPubRbDataItemFee>,
    /// Representation of the nonce value
    #[serde(rename = "nonce", skip_serializing_if = "Option::is_none")]
    pub nonce: Option<String>,
    /// Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
    #[serde(rename = "recipient")]
    pub recipient: String,
    /// Represents a  sender address with the respective amount. In account-based protocols like Ethereum there is only one address in this list.
    #[serde(rename = "sender")]
    pub sender: String,
    /// Representation of the transaction type
    #[serde(rename = "transactionType", skip_serializing_if = "Option::is_none")]
    pub transaction_type: Option<TransactionType>,
    /// Defines the account extended publicly known key which is used to derive all child public keys.
    #[serde(rename = "xpub")]
    pub xpub: String,
}

impl PrepareAnAccountBasedTransactionFromHdWalletXPubYPubZPubRbDataItem {
    pub fn new(amount: String, fee: crate::models::PrepareAnAccountBasedTransactionFromHdWalletXPubYPubZPubRbDataItemFee, recipient: String, sender: String, xpub: String) -> PrepareAnAccountBasedTransactionFromHdWalletXPubYPubZPubRbDataItem {
        PrepareAnAccountBasedTransactionFromHdWalletXPubYPubZPubRbDataItem {
            additional_data: None,
            amount,
            fee: Box::new(fee),
            nonce: None,
            recipient,
            sender,
            transaction_type: None,
            xpub,
        }
    }
}

/// Representation of the transaction type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransactionType {
    #[serde(rename = "legacy-transaction")]
    LegacyTransaction,
    #[serde(rename = "access-list-transaction")]
    AccessListTransaction,
    #[serde(rename = "gas-fee-market-transaction")]
    GasFeeMarketTransaction,
}

