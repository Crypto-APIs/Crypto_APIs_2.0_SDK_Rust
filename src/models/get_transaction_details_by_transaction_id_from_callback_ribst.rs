/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 */

/// GetTransactionDetailsByTransactionIdFromCallbackRibst : Tron



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetTransactionDetailsByTransactionIdFromCallbackRibst {
    /// Defines the amount of the transaction.
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "bandwidthUsed")]
    pub bandwidth_used: Box<crate::models::GetTransactionDetailsByTransactionIdFromCallbackRibstBandwidthUsed>,
    /// Represents the specific transaction contract.
    #[serde(rename = "contract")]
    pub contract: String,
    #[serde(rename = "energyUsed")]
    pub energy_used: Box<crate::models::GetTransactionDetailsByTransactionIdFromCallbackRibstEnergyUsed>,
    /// Defines if the transaction includes internal transactions (true) or not (false).
    #[serde(rename = "hasInternalTransactions")]
    pub has_internal_transactions: bool,
    /// Defines if the transaction includes token transfers (true) or not (false).
    #[serde(rename = "hasTokenTransfers")]
    pub has_token_transfers: String,
    /// Represents the transaction's input value.
    #[serde(rename = "input")]
    pub input: String,
    /// Represents the recipient address.
    #[serde(rename = "recipients")]
    pub recipients: String,
    /// Represents the sender address.
    #[serde(rename = "senders")]
    pub senders: String,
    /// Represents the status of this transaction.
    #[serde(rename = "transactionStatus")]
    pub transaction_status: String,
}

impl GetTransactionDetailsByTransactionIdFromCallbackRibst {
    /// Tron
    pub fn new(amount: String, bandwidth_used: crate::models::GetTransactionDetailsByTransactionIdFromCallbackRibstBandwidthUsed, contract: String, energy_used: crate::models::GetTransactionDetailsByTransactionIdFromCallbackRibstEnergyUsed, has_internal_transactions: bool, has_token_transfers: String, input: String, recipients: String, senders: String, transaction_status: String) -> GetTransactionDetailsByTransactionIdFromCallbackRibst {
        GetTransactionDetailsByTransactionIdFromCallbackRibst {
            amount,
            bandwidth_used: Box::new(bandwidth_used),
            contract,
            energy_used: Box::new(energy_used),
            has_internal_transactions,
            has_token_transfers,
            input,
            recipients,
            senders,
            transaction_status,
        }
    }
}


