/*
 * CryptoAPIs
 *
 * Crypto APIs 2.0 is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs 2.0 can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs 2.0 provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NewConfirmedTokenTransactionsForSpecificAmountRi {
    /// Represents a specific amount of coins after which the system have to send a callback to customers' callbackUrl.
    #[serde(rename = "amountHigherThan")]
    pub amount_higher_than: i64,
    /// Represents the Secret Key value provided by the customer. This field is used for security purposes during the callback notification, in order to prove the sender of the callback as Crypto APIs. For more information please see our [Documentation](https://developers.cryptoapis.io/technical-documentation/general-information/callbacks#callback-security).
    #[serde(rename = "callbackSecretKey", skip_serializing_if = "Option::is_none")]
    pub callback_secret_key: Option<String>,
    /// Represents the URL that is set by the customer where the callback will be received at. The callback notification will be received only if and when the event occurs. `We support ONLY httpS type of protocol`.
    #[serde(rename = "callbackUrl")]
    pub callback_url: String,
    /// Represents the contract address of the token, which controls its logic. It is not the address that holds the tokens.
    #[serde(rename = "contractAddress")]
    pub contract_address: String,
    /// Defines the specific time/date when the subscription was created in Unix Timestamp.
    #[serde(rename = "createdTimestamp")]
    pub created_timestamp: i32,
    /// Defines the type of the specific event available for the customer to subscribe to for callback notification.
    #[serde(rename = "eventType")]
    pub event_type: String,
    /// Defines whether the subscription is active or not. Set as boolean.
    #[serde(rename = "isActive")]
    pub is_active: bool,
    /// Represents a unique ID used to reference the specific callback subscription.
    #[serde(rename = "referenceId")]
    pub reference_id: String,
}

impl NewConfirmedTokenTransactionsForSpecificAmountRi {
    pub fn new(amount_higher_than: i64, callback_url: String, contract_address: String, created_timestamp: i32, event_type: String, is_active: bool, reference_id: String) -> NewConfirmedTokenTransactionsForSpecificAmountRi {
        NewConfirmedTokenTransactionsForSpecificAmountRi {
            amount_higher_than,
            callback_secret_key: None,
            callback_url,
            contract_address,
            created_timestamp,
            event_type,
            is_active,
            reference_id,
        }
    }
}


