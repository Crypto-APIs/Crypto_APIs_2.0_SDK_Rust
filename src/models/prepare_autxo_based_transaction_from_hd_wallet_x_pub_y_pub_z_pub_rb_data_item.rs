/*
 * CryptoAPIs
 *
 * Crypto APIs is a complex and innovative infrastructure layer that radically simplifies the development of any Blockchain and Crypto related applications. Organized around REST, Crypto APIs can assist both novice Bitcoin/Ethereum enthusiasts and crypto experts with the development of their blockchain applications. Crypto APIs provides unified endpoints and data, raw data, automatic tokens and coins forwardings, callback functionalities, and much more.
 *
 * The version of the OpenAPI document: 2021-03-20
 * Contact: developers@cryptoapis.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrepareAutxoBasedTransactionFromHdWalletXPubYPubZPubRbDataItem {
    /// Representation of the additional data.
    #[serde(rename = "additionalData", skip_serializing_if = "Option::is_none")]
    pub additional_data: Option<String>,
    #[serde(rename = "fee")]
    pub fee: Box<crate::models::PrepareAutxoBasedTransactionFromHdWalletXPubYPubZPubRbDataItemFee>,
    /// Represents the time at which a particular transaction can be added to the blockchain.
    #[serde(rename = "locktime", skip_serializing_if = "Option::is_none")]
    pub locktime: Option<i32>,
    /// Representation of the transaction's strategy type
    #[serde(rename = "prepareStrategy", skip_serializing_if = "Option::is_none")]
    pub prepare_strategy: Option<PrepareStrategy>,
    /// Represents a list of recipient addresses with the respective amounts. In account-based protocols like Ethereum there is only one address in this list.
    #[serde(rename = "recipients")]
    pub recipients: Vec<crate::models::PrepareAutxoBasedTransactionFromHdWalletXPubYPubZPubRbDataItemRecipients>,
    /// Representation of whether the transaction is replaceable
    #[serde(rename = "replaceable", skip_serializing_if = "Option::is_none")]
    pub replaceable: Option<bool>,
    /// Defines the account extended publicly known key which is used to derive all child public keys.
    #[serde(rename = "xpub")]
    pub xpub: String,
}

impl PrepareAutxoBasedTransactionFromHdWalletXPubYPubZPubRbDataItem {
    pub fn new(fee: crate::models::PrepareAutxoBasedTransactionFromHdWalletXPubYPubZPubRbDataItemFee, recipients: Vec<crate::models::PrepareAutxoBasedTransactionFromHdWalletXPubYPubZPubRbDataItemRecipients>, xpub: String) -> PrepareAutxoBasedTransactionFromHdWalletXPubYPubZPubRbDataItem {
        PrepareAutxoBasedTransactionFromHdWalletXPubYPubZPubRbDataItem {
            additional_data: None,
            fee: Box::new(fee),
            locktime: None,
            prepare_strategy: None,
            recipients,
            replaceable: None,
            xpub,
        }
    }
}

/// Representation of the transaction's strategy type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PrepareStrategy {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "minimize-dust")]
    MinimizeDust,
    #[serde(rename = "optimize-size")]
    OptimizeSize,
}

